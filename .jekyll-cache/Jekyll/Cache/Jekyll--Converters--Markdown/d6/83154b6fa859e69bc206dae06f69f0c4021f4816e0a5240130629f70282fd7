I"7<p>This tutorial explains how to use the L-Solver library in order to model an optimization problem and to solve it via an external solver. The modeling framework in L-Solver is actually rather similar to some comercial solvers. The most important thing to grasp is how the Environment class and the Model class interacts and which role is played by each. In the following section, we shall first discuss the role of Environments and how its components are stored. Then, we will show how to use a Model to actually solve an optimization problem.</p>

<h2 id="lenvironment-and-modeling-components">L::Environment and modeling components</h2>

<p>Basically, an Environment is an object responsible for the life and death of its components. A component may be a variable, a constraint or an objective. Let us first look at the following example which creates a new variable in the environment:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Environment</span> <span class="n">env</span><span class="p">;</span> <span class="c1">// creates an environment</span>
<span class="n">Variable</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Variable</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"x"</span><span class="p">);</span> <span class="c1">// creates a new variable</span>
</code></pre></div></div>

<p>What this two lines of code do behind the hood is actually not straightforward. Indeed, one may notice that we create here a new Variable object that one can kill (via <code class="highlighter-rouge">delete &amp;x;</code>) any time he wants. Moreover, <code class="highlighter-rouge">x</code> will automatically be destroyed at the end of its scope. So, is really <code class="highlighter-rouge">env</code> responsible for the life and death of <code class="highlighter-rouge">x</code> ? Does <code class="highlighter-rouge">env</code> still contain an <code class="highlighter-rouge">x</code> variable after <code class="highlighter-rouge">x</code> is being killed by the end of its scope ? The answer to these questions is found in the concept of Core components and regular components. In fact, calling <code class="highlighter-rouge">Variable(env, "x")</code> does not return a “real” variable but gives you an indirection to a core variable. A core variable is an actual implementation of a variable and is managed, and accessible, only by the environement. Core variables (as implemented by the CoreVariable class) is the essence of what a regular Variable represents in the sense that it posesses all of its attributes like name, value, upper bound, lower bound, type, etc. A (regular) variable (as implemented by the Variable class) does nothing but to forward method calls to its associated core variable.</p>
:ET