results[results$time_ccg >= 3600,]$time_ccg <- 3600
if (length(results$time_benders >= 3600) > 0) {
results[results$time_benders >= 3600,]$time_benders <- 3600
}
length(results$time_benders)
length(results$time_benders >= 3600)
results[results$time_ccg >= 3600,]$time_ccg <- 3600
length(results$time_benders >= 3600)
length(results$time_benders >= 3600)
sum(results$time_benders >= 3600)
if (sum(results$time_benders >= 3600) > 0) {
results[results$time_benders >= 3600,]$time_benders <- 3600
}
if (sum(results$time_ccg >= 3600) > 0) {
results[results$time_ccg >= 3600,]$time_ccg <- 3600
}
if (sum(results$time_benders >= 3600) > 0) {
results[results$time_benders >= 3600,]$time_benders <- 3600
}
knitr::kable(results)
- *instance*: the instance filename ;
library(rmarkdown)
benders = read.csv("./results_benders.csv", header = FALSE)
colnames(benders) <- c("instance", "status", "reason", "objective", "time", "nodes")
paged_table(benders)
ccg = read.csv("./results_ccg.csv", header = FALSE)
colnames(ccg) <- c("instance", "iter", "LB", "UB", "time", "inner_iter_1", "inner_iter_2")
paged_table(ccg)
results = merge(benders, ccg, by = "instance")
results = results[,c("instance", "objective", "time.x", "UB", "time.y")]
colnames(results) <- c("instance", "obj_benders", "time_benders", "obj_ccg", "time_ccg")
library(stringr)
parsed = t(apply(as.matrix(results$instance), 1, function(str)  str_extract_all(results$instance, regex("([0-9]+)"))[[1]]))
results$n_knapsacks = parsed[,1]
results$n_items = parsed[,2]
results$alpha = parsed[,3]
if (sum(results$time_ccg >= 3600) > 0) {
results[results$time_ccg >= 3600,]$time_ccg <- 3600
}
if (sum(results$time_benders >= 3600) > 0) {
results[results$time_benders >= 3600,]$time_benders <- 3600
}
paged_table(results)
# Computing average computation time
cpu_times = aggregate(results[,c("time_benders", "time_ccg")], list(results$n_knapsacks, results$n_items), mean)
colnames(cpu_times) <- c("n_knapsacks", "n_items", "time_benders", "time_ccg")
# Sorting by number of knapsacks and items
cpu_times = cpu_times[order(cpu_times$n_knapsacks, cpu_times$n_items),]
rownames(cpu_times) <- NULL
knitr::kable(cpu_times, digits = c(0, 0, 2, 2))
results$time_best = apply(results[,c("time_benders", "time_ccg")], 1, FUN = min)
results$perf_benders = results$time_benders / results$time_best
results$perf_ccg = results$time_ccg / results$time_best
max_perf = max( max(results$time_benders), max(results$time_ccg) )
results$perf_benders[results$time_benders >= 3600] = max_perf
results$perf_ccg[results$time_ccg >= 3600] = max_perf
plot_performance_profile <- function(data, xlim = c(1, max_perf), ylim = c(0., 1.), title = "Performance profile") {
perf_profile_benders = ecdf(data[,"perf_benders"])
perf_profile_ccg = ecdf(data[,"perf_ccg"])
plot(perf_profile_benders, col = "black", xlim = xlim, ylim = ylim, lty = "solid", cex = 0, main = title)
lines(perf_profile_ccg, col = "black", xlim = xlim, ylim = ylim, lty = "dotted", cex = 0)
}
xlim = c(1, 10)
plot_performance_profile(results, title = "Over all instances", xlim = xlim)
#results[results$time_benders >= 3600,]
results[results$time_ccg >= 3600,]
#results[results$time_benders > 3600,]
results[results$time_ccg > 3600,]
results = resuts[results$time_benders < 3600,]
# Computing average computation time
cpu_times = aggregate(results[,c("time_benders", "time_ccg")], list(results$n_knapsacks, results$n_items, results$alpha), mean)
colnames(cpu_times) <- c("n_knapsacks", "n_items", "alpha", "time_benders", "time_ccg")
# Sorting by number of knapsacks and items
cpu_times = cpu_times[order(cpu_times$n_knapsacks, cpu_times$n_items, cpu_times$alpha),]
rownames(cpu_times) <- NULL
library(rmarkdown)
benders = read.csv("./results_benders.csv", header = FALSE)
colnames(benders) <- c("instance", "status", "reason", "objective", "time", "nodes")
paged_table(benders)
ccg = read.csv("./results_ccg.csv", header = FALSE)
colnames(ccg) <- c("instance", "iter", "LB", "UB", "time", "inner_iter_1", "inner_iter_2")
paged_table(ccg)
results = merge(benders, ccg, by = "instance")
results = results[,c("instance", "objective", "time.x", "UB", "time.y")]
colnames(results) <- c("instance", "obj_benders", "time_benders", "obj_ccg", "time_ccg")
library(stringr)
parsed = t(apply(as.matrix(results$instance), 1, function(str)  str_extract_all(results$instance, regex("([0-9]+)"))[[1]]))
results$n_knapsacks = parsed[,1]
results$n_items = parsed[,2]
results$alpha = parsed[,3]
# (TODO: this will be removed when all data is collected)
#results[results$time_benders > 3600,]
#results[results$time_ccg > 3600,]
if (sum(results$time_ccg > 3600) > 0) {
results[results$time_ccg > 3600,]$time_ccg <- 3600
}
if (sum(results$time_benders > 3600) > 0) {
results[results$time_benders > 3600,]$time_benders <- 3600
}
paged_table(results)
# Computing average computation time
cpu_times = aggregate(results[,c("time_benders", "time_ccg")], list(results$n_knapsacks, results$n_items, results$alpha), mean)
colnames(cpu_times) <- c("n_knapsacks", "n_items", "alpha", "time_benders", "time_ccg")
# Sorting by number of knapsacks and items
cpu_times = cpu_times[order(cpu_times$n_knapsacks, cpu_times$n_items, cpu_times$alpha),]
rownames(cpu_times) <- NULL
knitr::kable(cpu_times, digits = c(0, 0, 2, 2))
results$time_best = apply(results[,c("time_benders", "time_ccg")], 1, FUN = min)
results$perf_benders = results$time_benders / results$time_best
results$perf_ccg = results$time_ccg / results$time_best
max_perf = max( max(results$time_benders), max(results$time_ccg) )
results$perf_benders[results$time_benders >= 3600] = max_perf
results$perf_ccg[results$time_ccg >= 3600] = max_perf
plot_performance_profile <- function(data, xlim = c(1, max_perf), ylim = c(0., 1.), title = "Performance profile") {
perf_profile_benders = ecdf(data[,"perf_benders"])
perf_profile_ccg = ecdf(data[,"perf_ccg"])
plot(perf_profile_benders, col = "black", xlim = xlim, ylim = ylim, lty = "solid", cex = 0, main = title)
lines(perf_profile_ccg, col = "black", xlim = xlim, ylim = ylim, lty = "dotted", cex = 0)
}
xlim = c(1, 10)
plot_performance_profile(results, title = "Over all instances", xlim = xlim)
results[abs(results$obj_benders - results$obj_ccg) > 1e-3]
abs(results$obj_benders - results$obj_ccg) > 1e-3
results[abs(results$obj_benders - results$obj_ccg) > 1e-3, ]
results[abs(results$obj_benders - results$obj_ccg) > 1e-3 & results$time_ccg < 3600 & results$time_benders < 3600, ][,c("instance", "obj_benders", "obj_ccg")]
results[abs(results$obj_benders - results$obj_ccg) > 1e-3 & results$time_ccg < 3600 & results$time_benders < 3600, ][,c("instance", "obj_benders", "obj_ccg", "status")]
results[abs(results$obj_benders - results$obj_ccg) > 1e-3 & results$time_ccg < 3600 & results$time_benders < 3600, ][,c("instance", "obj_benders", "obj_ccg", "time_benders")]
results[abs(results$obj_benders - results$obj_ccg) > 1e-3 & results$time_ccg < 3600 & results$time_benders < 3600, ][,c("instance", "obj_benders", "obj_ccg", "time_benders", "time_ccg")]
library(rmarkdown)
benders = read.csv("./results_benders.csv", header = FALSE)
colnames(benders) <- c("instance", "status", "reason", "objective", "time", "nodes")
paged_table(benders)
ccg = read.csv("./results_ccg.csv", header = FALSE)
colnames(ccg) <- c("instance", "iter", "LB", "UB", "time", "inner_iter_1", "inner_iter_2")
paged_table(ccg)
results = merge(benders, ccg, by = "instance")
results = results[,c("instance", "objective", "time.x", "UB", "time.y")]
colnames(results) <- c("instance", "obj_benders", "time_benders", "obj_ccg", "time_ccg")
library(stringr)
parsed = t(apply(as.matrix(results$instance), 1, function(str)  str_extract_all(results$instance, regex("([0-9]+)"))[[1]]))
results$n_knapsacks = parsed[,1]
results$n_items = parsed[,2]
results$alpha = parsed[,3]
# (TODO: this will be removed when all data is collected)
#results[results$time_benders > 3600,]
#results[results$time_ccg > 3600,]
if (sum(results$time_ccg > 3600) > 0) {
results[results$time_ccg > 3600,]$time_ccg <- 3600
}
if (sum(results$time_benders > 3600) > 0) {
results[results$time_benders > 3600,]$time_benders <- 3600
}
paged_table(results)
results[abs(results$obj_benders - results$obj_ccg) > 1e-3 & results$time_ccg < 3600 & results$time_benders < 3600, ][,c("instance", "obj_benders", "obj_ccg", "time_benders", "time_ccg")]
# Computing average computation time
cpu_times = aggregate(results[,c("time_benders", "time_ccg")], list(results$n_knapsacks, results$n_items, results$alpha), mean)
colnames(cpu_times) <- c("n_knapsacks", "n_items", "alpha", "time_benders", "time_ccg")
# Sorting by number of knapsacks and items
cpu_times = cpu_times[order(cpu_times$n_knapsacks, cpu_times$n_items, cpu_times$alpha),]
rownames(cpu_times) <- NULL
knitr::kable(cpu_times, digits = c(0, 0, 2, 2))
results$time_best = apply(results[,c("time_benders", "time_ccg")], 1, FUN = min)
results$perf_benders = results$time_benders / results$time_best
results$perf_ccg = results$time_ccg / results$time_best
max_perf = max( max(results$time_benders), max(results$time_ccg) )
results$perf_benders[results$time_benders >= 3600] = max_perf
results$perf_ccg[results$time_ccg >= 3600] = max_perf
plot_performance_profile <- function(data, xlim = c(1, max_perf), ylim = c(0., 1.), title = "Performance profile") {
perf_profile_benders = ecdf(data[,"perf_benders"])
perf_profile_ccg = ecdf(data[,"perf_ccg"])
plot(perf_profile_benders, col = "black", xlim = xlim, ylim = ylim, lty = "solid", cex = 0, main = title)
lines(perf_profile_ccg, col = "black", xlim = xlim, ylim = ylim, lty = "dotted", cex = 0)
}
xlim = c(1, 10)
plot_performance_profile(results, title = "Over all instances", xlim = xlim)
library(rmarkdown)
all_results = read.csv("results.csv", na.strings = "")
paged_table(all_results)
problem1 = all_results[all_results$problem == 1,]
colgen1 = problem1[problem1$approach == "colgen" & problem1$rule_for_branching == "default",]
kadapt1_a = problem1[problem1$approach == "kadapt-a",]
kadapt1_b = problem1[problem1$approach == "kadapt-b",]
kadapt1 = merge(kadapt1_a, kadapt1_b, by = c("instance", "n_jobs", "gamma", "k"))
kadapt1 = kadapt1[,c("instance", "n_jobs", "gamma", "k", "objective.x", "objective.y", "cpu.x", "cpu.y")]
colnames(kadapt1) <- c("instance", "n_jobs", "gamma", "k", "obj_kadapt1_a", "obj_kadapt1_b", "cpu_kadapt1_a", "cpu_kadapt1_b")
all1 = merge(colgen1, kadapt1, by = c("instance", "n_jobs", "gamma"), all = TRUE)
all1 = all1[,c("instance", "n_jobs", "gamma", "objective", "k.y", "obj_kadapt1_a", "obj_kadapt1_b", "cpu", "cpu_kadapt1_a", "cpu_kadapt1_b")]
colnames(all1) <- c("instance", "n_jobs", "gamma", "obj_colgen1", "k", "obj_kadapt1_a", "obj_kadapt1_b", "cpu_colgen1", "cpu_kadapt1_a", "cpu_kadapt1_b")
equals <- function (a, b, tol = 1e-4) {
return ( abs(a - b) <= tol )
}
optimal_K1 = all1[
(
equals(all1$obj_colgen1, all1$obj_kadapt1_a) | equals(all1$obj_colgen1, all1$obj_kadapt1_b)
)
|
(
all1$cpu_kadapt1_a >= 3600 | all1$cpu_kadapt1_b >= 3600
)
,]
optimal_K1 = optimal_K1[order(optimal_K1$instance, optimal_K1$gamma, optimal_K1$k),]
optimal_K1 = optimal_K1[!duplicated(( optimal_K1[,c("instance", "gamma")] )),]
# Computing average computation time
cpu_times = aggregate(optimal_K1[,c("cpu_kadapt1_a", "cpu_kadapt1_b", "cpu_colgen1")], list(optimal_K1$n_jobs, optimal_K1$gamma), mean)
colnames(cpu_times) <- c("n_jobs", "gamma", "cpu_kadapt1_a", "cpu_kadapt1_b", "cpu_colgen1")
# Sorting by number of jobs and gamma
cpu_times = cpu_times[order(cpu_times$n_jobs, cpu_times$gamma),]
rownames(cpu_times) <- NULL
knitr::kable(cpu_times, digits = c(0, 0, 2, 2, 2))
optimal_K1$colgen1_is_fastest = optimal_K1$cpu_colgen1 < optimal_K1$cpu_kadapt1_a & optimal_K1$cpu_colgen1 < optimal_K1$cpu_kadapt1_b
optimal_K1$kadapt1_a_is_fastest = optimal_K1$cpu_kadapt1_a < optimal_K1$cpu_colgen1 & optimal_K1$cpu_kadapt1_a < optimal_K1$cpu_kadapt1_b
optimal_K1$kadapt1_b_is_fastest = optimal_K1$cpu_kadapt1_b <= optimal_K1$cpu_colgen1 & optimal_K1$cpu_kadapt1_b <= optimal_K1$cpu_kadapt1_a
# Counting times in which a method is faster than the others
fastest = aggregate(optimal_K1[,c("kadapt1_a_is_fastest", "kadapt1_b_is_fastest", "colgen1_is_fastest")], list(optimal_K1$n_jobs, optimal_K1$gamma), sum)
colnames(fastest) <- c("n_jobs", "gamma", "kadapt1_a_is_fastest", "kadapt1_b_is_fastest", "colgen1_is_fastest")
# Sorting by number of jobs and gamma
fastest = fastest[order(fastest$n_jobs, fastest$gamma),]
rownames(fastest) <- NULL
fastest[,c("kadapt1_a_is_fastest", "kadapt1_b_is_fastest", "colgen1_is_fastest")] = fastest[,c("kadapt1_a_is_fastest", "kadapt1_b_is_fastest", "colgen1_is_fastest")] / rowSums(fastest[,c("kadapt1_a_is_fastest", "kadapt1_b_is_fastest", "colgen1_is_fastest")]) * 100
knitr::kable(fastest, digits = c(0, 0, 2, 2, 2))
optimal_K1$cpu_best = apply(optimal_K1[,c("cpu_colgen1", "cpu_kadapt1_a", "cpu_kadapt1_b")], 1, FUN = min)
optimal_K1$perf_colgen1 = optimal_K1$cpu_colgen1 / optimal_K1$cpu_best
optimal_K1$perf_kadapt1_a = optimal_K1$cpu_kadapt1_a / optimal_K1$cpu_best
optimal_K1$perf_kadapt1_b = optimal_K1$cpu_kadapt1_b / optimal_K1$cpu_best
max_perf = max( max(optimal_K1$perf_colgen1), max(optimal_K1$perf_kadapt1_a), max(optimal_K1$perf_kadapt1_b) )
optimal_K1$perf_colgen1[optimal_K1$cpu_colgen1 >= 3600] = max_perf
optimal_K1$perf_kadapt1_a[optimal_K1$cpu_kadapt1_a >= 3600] = max_perf
optimal_K1$perf_kadapt1_b[optimal_K1$cpu_kadapt1_b >= 3600] = max_perf
plot_performance_profile <- function(data, xlim = c(1, max_perf), ylim = c(0., 1.), title = "Performance profile") {
perf_profile_colgen1 = ecdf(data[,"perf_colgen1"])
perf_profile_kadapt1_a = ecdf(data[,"perf_kadapt1_a"])
perf_profile_kadapt1_b = ecdf(data[,"perf_kadapt1_b"])
plot(perf_profile_colgen1, col = "black", xlim = xlim, ylim = ylim, lty = "solid", cex = 0, main = title)
lines(perf_profile_kadapt1_a, col = "black", xlim = xlim, ylim = ylim, lty = "dotted", cex = 0)
lines(perf_profile_kadapt1_b, col = "black", xlim = xlim, ylim = ylim, lty = "dashed", cex = 0)
}
xlim = c(1, 2000)
plot_performance_profile(optimal_K1, title = "Over all instances", xlim = xlim)
plot_performance_profile(optimal_K1[optimal_K1$n_jobs == 25,], title = "Over 25-jobs instances", xlim = xlim)
plot_performance_profile(optimal_K1[optimal_K1$gamma <= optimal_K1$n_jobs / 4.,], title = "Over those instances with gamma <= n_jobs / 4", xlim = xlim)
# Counting unsolved instances
unsolved = aggregate(optimal_K1[,c("unsolved_kadapt1_a", "unsolved_kadapt1_b", "unsolved_colgen1")], list(optimal_K1$n_jobs, optimal_K1$gamma), sum)
optimal_K1$unsolved_colgen1 = optimal_K1$cpu_colgen1 >= 3600
optimal_K1$unsolved_kadapt1_a = optimal_K1$unsolved_kadapt1_a >= 3600
optimal_K1$unsolved_kadapt1_b = optimal_K1$unsolved_kadapt1_b >= 3600
optimal_K1$unsolved_colgen1 = optimal_K1$cpu_colgen1 >= 3600
optimal_K1$unsolved_kadapt1_a = optimal_K1$cpu_kadapt1_a >= 3600
optimal_K1$unsolved_kadapt1_b = optimal_K1$cpu_kadapt1_b >= 3600
# Counting unsolved instances
unsolved = aggregate(optimal_K1[,c("unsolved_kadapt1_a", "unsolved_kadapt1_b", "unsolved_colgen1")], list(optimal_K1$n_jobs, optimal_K1$gamma), sum)
colnames(unsolved) <- c("n_jobs", "gamma", "cpu_kadapt1_a", "cpu_kadapt1_b", "cpu_colgen1")
# Sorting by number of jobs and gamma
unsolved = unsolved[order(unsolved$n_jobs, unsolved$gamma),]
rownames(unsolved) <- NULL
results$unsolved_benders = results$time_benders >= 3600
results$unsolved_benders = results$time_benders >= 3600
```{r}
library(rmarkdown)
benders = read.csv("./results_benders.csv", header = FALSE)
colnames(benders) <- c("instance", "status", "reason", "objective", "time", "nodes")
paged_table(benders)
ccg = read.csv("./results_ccg.csv", header = FALSE)
colnames(ccg) <- c("instance", "iter", "LB", "UB", "time", "inner_iter_1", "inner_iter_2")
paged_table(ccg)
results = merge(benders, ccg, by = "instance")
results = results[,c("instance", "objective", "time.x", "UB", "time.y")]
colnames(results) <- c("instance", "obj_benders", "time_benders", "obj_ccg", "time_ccg")
library(stringr)
parsed = t(apply(as.matrix(results$instance), 1, function(str)  str_extract_all(results$instance, regex("([0-9]+)"))[[1]]))
results$n_knapsacks = parsed[,1]
results$n_items = parsed[,2]
results$alpha = parsed[,3]
# (TODO: this will be removed when all data is collected)
#results[results$time_benders > 3600,]
#results[results$time_ccg > 3600,]
if (sum(results$time_ccg > 3600) > 0) {
results[results$time_ccg > 3600,]$time_ccg <- 3600
}
if (sum(results$time_benders > 3600) > 0) {
results[results$time_benders > 3600,]$time_benders <- 3600
}
paged_table(results)
results[abs(results$obj_benders - results$obj_ccg) > 1e-3 & results$time_ccg < 3600 & results$time_benders < 3600, ][,c("instance", "obj_benders", "obj_ccg", "time_benders", "time_ccg")]
results$unsolved_benders = results$time_benders >= 3600
results$unsolved_ccg = results$time_ccg >= 3600
unsolved1 = aggregate(optimal_K1[,c("unsolved_kadapt1_a", "unsolved_kadapt1_b", "unsolved_colgen1")], list(optimal_K1$n_jobs, optimal_K1$gamma), sum)
colnames(unsolved1) <- c("n_jobs", "gamma", "unsolved_kadapt1_a", "unsolved_kadapt1_b", "unsolved_colgen1")
# Computing average computation time
cpu_times = aggregate(results[,c("time_benders", "time_ccg")], list(results$n_knapsacks, results$n_items, results$alpha), mean)
colnames(cpu_times) <- c("n_knapsacks", "n_items", "alpha", "time_benders", "time_ccg")
# Sorting by number of knapsacks and items
cpu_times = cpu_times[order(cpu_times$n_knapsacks, cpu_times$n_items, cpu_times$alpha),]
rownames(cpu_times) <- NULL
knitr::kable(cpu_times, digits = c(0, 0, 2, 2))
results$time_best = apply(results[,c("time_benders", "time_ccg")], 1, FUN = min)
results$perf_benders = results$time_benders / results$time_best
results$perf_ccg = results$time_ccg / results$time_best
max_perf = max( max(results$time_benders), max(results$time_ccg) )
results$perf_benders[results$time_benders >= 3600] = max_perf
results$perf_ccg[results$time_ccg >= 3600] = max_perf
plot_performance_profile <- function(data, xlim = c(1, max_perf), ylim = c(0., 1.), title = "Performance profile") {
perf_profile_benders = ecdf(data[,"perf_benders"])
perf_profile_ccg = ecdf(data[,"perf_ccg"])
plot(perf_profile_benders, col = "black", xlim = xlim, ylim = ylim, lty = "solid", cex = 0, main = title)
lines(perf_profile_ccg, col = "black", xlim = xlim, ylim = ylim, lty = "dotted", cex = 0)
}
xlim = c(1, 10)
plot_performance_profile(results, title = "Over all instances", xlim = xlim)
library(rmarkdown)
benders = read.csv("./results_benders.csv", header = FALSE)
colnames(benders) <- c("instance", "status", "reason", "objective", "time", "nodes")
paged_table(benders)
ccg = read.csv("./results_ccg.csv", header = FALSE)
colnames(ccg) <- c("instance", "iter", "LB", "UB", "time", "inner_iter_1", "inner_iter_2")
paged_table(ccg)
results = merge(benders, ccg, by = "instance")
results = results[,c("instance", "objective", "time.x", "UB", "time.y")]
colnames(results) <- c("instance", "obj_benders", "time_benders", "obj_ccg", "time_ccg")
library(stringr)
parsed = t(apply(as.matrix(results$instance), 1, function(str)  str_extract_all(results$instance, regex("([0-9]+)"))[[1]]))
results$n_knapsacks = parsed[,1]
results$n_items = parsed[,2]
results$alpha = parsed[,3]
# (TODO: this will be removed when all data is collected)
#results[results$time_benders > 3600,]
#results[results$time_ccg > 3600,]
if (sum(results$time_ccg > 3600) > 0) {
results[results$time_ccg > 3600,]$time_ccg <- 3600
}
if (sum(results$time_benders > 3600) > 0) {
results[results$time_benders > 3600,]$time_benders <- 3600
}
paged_table(results)
results[abs(results$obj_benders - results$obj_ccg) > 1e-3 & results$time_ccg < 3600 & results$time_benders < 3600, ][,c("instance", "obj_benders", "obj_ccg", "time_benders", "time_ccg")]
results$unsolved_benders = results$time_benders >= 3600
results$unsolved_ccg = results$time_ccg >= 3600
unsolved = aggregate(results[,c("unsolved_benders", "unsolved_ccg", "unsolved_colgen1")], list(results$n_jobs, results$gamma), sum)
results$unsolved_benders = results$time_benders >= 3600
results$unsolved_ccg = results$time_ccg >= 3600
unsolved = aggregate(results[,c("unsolved_benders", "unsolved_ccg", "unsolved_colgen1")], list(results$n_jobs, results$gamma), sum)
unsolved = aggregate(results[,c("unsolved_benders", "unsolved_ccg")], list(results$n_jobs, results$gamma), sum)
unsolved = aggregate(results[,c("unsolved_benders", "unsolved_ccg")], list(results$n_jobs, results$gamma), sum)
unsolved = aggregate(results[,c("unsolved_benders", "unsolved_ccg")], list(results$n_knapsacks, results$n_items, results$alpha), sum)
colnames(unsolved) <- c("n_jobs", "gamma", "unsolved_kadapt1_a", "unsolved_kadapt1_b", "unsolved_colgen1")
# Computing average computation time
cpu_times = aggregate(results[,c("time_benders", "time_ccg")], list(results$n_knapsacks, results$n_items, results$alpha), mean)
colnames(cpu_times) <- c("n_knapsacks", "n_items", "alpha", "time_benders", "time_ccg")
# Sorting by number of knapsacks and items
cpu_times = cpu_times[order(cpu_times$n_knapsacks, cpu_times$n_items, cpu_times$alpha),]
rownames(cpu_times) <- NULL
rownames(cpu_times) <- NULL
The resulting table reads.
knitr::kable(cpu_times, digits = c(0, 0, 2, 2))
unsolved
colnames(unsolved) <- c("n_knapsacks", "n_items", "unsolved_benders", "unsolved_ccg")
unsolved
library(rmarkdown)
benders = read.csv("./results_benders.csv", header = FALSE)
colnames(benders) <- c("instance", "status", "reason", "objective", "time", "nodes")
paged_table(benders)
ccg = read.csv("./results_ccg.csv", header = FALSE)
colnames(ccg) <- c("instance", "iter", "LB", "UB", "time", "inner_iter_1", "inner_iter_2")
paged_table(ccg)
results = merge(benders, ccg, by = "instance")
results = results[,c("instance", "objective", "time.x", "UB", "time.y")]
colnames(results) <- c("instance", "obj_benders", "time_benders", "obj_ccg", "time_ccg")
library(stringr)
parsed = t(apply(as.matrix(results$instance), 1, function(str)  str_extract_all(results$instance, regex("([0-9]+)"))[[1]]))
results$n_knapsacks = parsed[,1]
results$n_items = parsed[,2]
results$alpha = parsed[,3]
# (TODO: this will be removed when all data is collected)
#results[results$time_benders > 3600,]
#results[results$time_ccg > 3600,]
if (sum(results$time_ccg > 3600) > 0) {
results[results$time_ccg > 3600,]$time_ccg <- 3600
}
if (sum(results$time_benders > 3600) > 0) {
results[results$time_benders > 3600,]$time_benders <- 3600
}
paged_table(results)
results[abs(results$obj_benders - results$obj_ccg) > 1e-3 & results$time_ccg < 3600 & results$time_benders < 3600, ][,c("instance", "obj_benders", "obj_ccg", "time_benders", "time_ccg")]
results$unsolved_benders = results$time_benders >= 3600
results$unsolved_ccg = results$time_ccg >= 3600
unsolved = aggregate(results[,c("unsolved_benders", "unsolved_ccg")], list(results$n_knapsacks, results$n_items, results$alpha), sum)
colnames(unsolved) <- c("n_knapsacks", "n_items", "unsolved_benders", "unsolved_ccg")
unsolved
# Computing average computation time
cpu_times = aggregate(results[,c("time_benders", "time_ccg")], list(results$n_knapsacks, results$n_items, results$alpha), mean)
colnames(cpu_times) <- c("n_knapsacks", "n_items", "alpha", "time_benders", "time_ccg")
# Sorting by number of knapsacks and items
cpu_times = cpu_times[order(cpu_times$n_knapsacks, cpu_times$n_items, cpu_times$alpha),]
rownames(cpu_times) <- NULL
knitr::kable(cpu_times, digits = c(0, 0, 2, 2))
results$time_best = apply(results[,c("time_benders", "time_ccg")], 1, FUN = min)
results$perf_benders = results$time_benders / results$time_best
results$perf_ccg = results$time_ccg / results$time_best
max_perf = max( max(results$time_benders), max(results$time_ccg) )
results$perf_benders[results$time_benders >= 3600] = max_perf
results$perf_ccg[results$time_ccg >= 3600] = max_perf
plot_performance_profile <- function(data, xlim = c(1, max_perf), ylim = c(0., 1.), title = "Performance profile") {
perf_profile_benders = ecdf(data[,"perf_benders"])
perf_profile_ccg = ecdf(data[,"perf_ccg"])
plot(perf_profile_benders, col = "black", xlim = xlim, ylim = ylim, lty = "solid", cex = 0, main = title)
lines(perf_profile_ccg, col = "black", xlim = xlim, ylim = ylim, lty = "dotted", cex = 0)
}
xlim = c(1, 10)
plot_performance_profile(results, title = "Over all instances", xlim = xlim)
colnames(unsolved) <- c("n_knapsacks", "n_items", "alpha", "unsolved_benders", "unsolved_ccg")
unsolved
# (TODO: this will be removed when all data is collected)
results[results$time_benders > 3600,]
results[results$time_ccg > 3600,]
# (TODO: this will be removed when all data is collected)
results[results$time_benders > 3600,]
attemps = aggregate(results[,c("instance")], list(results$n_knapsacks, results$n_items, results$alpha), length)
colnames(attemps) <- c("n_knapsacks", "n_items", "alpha", "total")
results$unsolved_benders = results$time_benders >= 3600
cpu_times_benders = aggregate(results[results$time_benders < 3600,][,c("time_benders")], list(results$n_knapsacks, results$n_items, results$alpha), mean)
compute_mean_time <- function(column_with_time) {
only_solved_instances = results[results[,column_with_time] < 3600]
cpu_times = aggregate(only_solved_instances[,column_with_time], list(only_solved_instances$n_knapsacks, only_solved_instances$n_items, only_solved_instances$alpha), mean)
colnames(cpu_times) <- c("n_knapsacks", "n_items", "alpha", "time")
}
compute_mean_time("time_benders")
compute_mean_time <- function(column_with_time) {
only_solved_instances = results[results[,column_with_time] < 3600,]
cpu_times = aggregate(only_solved_instances[,column_with_time], list(only_solved_instances$n_knapsacks, only_solved_instances$n_items, only_solved_instances$alpha), mean)
colnames(cpu_times) <- c("n_knapsacks", "n_items", "alpha", "time")
}
compute_mean_time("time_benders")
compute_mean_time <- function(column_with_time) {
only_solved_instances = results[results[,column_with_time] < 3600,]
cpu_times = aggregate(only_solved_instances[,column_with_time], list(only_solved_instances$n_knapsacks, only_solved_instances$n_items, only_solved_instances$alpha), mean)
colnames(cpu_times) <- c("n_knapsacks", "n_items", "alpha", "time")
return (cpu_times)
}
compute_mean_time("time_benders")
library(rmarkdown)
benders = read.csv("./results_benders.csv", header = FALSE)
colnames(benders) <- c("instance", "status", "reason", "objective", "time", "nodes")
paged_table(benders)
ccg = read.csv("./results_ccg.csv", header = FALSE)
colnames(ccg) <- c("instance", "iter", "LB", "UB", "time", "inner_iter_1", "inner_iter_2")
paged_table(ccg)
results = merge(benders, ccg, by = "instance")
results = results[,c("instance", "objective", "time.x", "UB", "time.y")]
colnames(results) <- c("instance", "obj_benders", "time_benders", "obj_ccg", "time_ccg")
library(stringr)
parsed = t(apply(as.matrix(results$instance), 1, function(str)  str_extract_all(str, regex("([0-9]+)"))[[1]]))
results$n_knapsacks = as.double(parsed[,1])
results$n_items = as.double(parsed[,2])
results$alpha = as.double(parsed[,3]) / 100
if (sum(results$time_ccg > 3600) > 0) {
results[results$time_ccg > 3600,]$time_ccg <- 3600
}
if (sum(results$time_benders > 3600) > 0) {
results[results$time_benders > 3600,]$time_benders <- 3600
}
paged_table(results)
results[abs(results$obj_benders - results$obj_ccg) > 1e-3 & results$time_ccg < 3600 & results$time_benders < 3600, ][,c("instance", "obj_benders", "obj_ccg", "time_benders", "time_ccg")]
attemps = aggregate(results[,c("instance")], list(results$n_knapsacks, results$n_items, results$alpha), length)
colnames(attemps) <- c("n_knapsacks", "n_items", "alpha", "total")
attemps = attemps[order(attemps$n_knapsacks, attemps$n_items, attemps$alpha),]
results$unsolved_benders = results$time_benders >= 3600
results$unsolved_ccg = results$time_ccg >= 3600
unsolved = aggregate(results[,c("unsolved_benders", "unsolved_ccg")], list(results$n_knapsacks, results$n_items, results$alpha), sum)
colnames(unsolved) <- c("n_knapsacks", "n_items", "alpha", "unsolved_benders", "unsolved_ccg")
unsolved = unsolved[order(unsolved$n_knapsacks, unsolved$n_items, unsolved$alpha),]
compute_mean_time <- function(column_with_time) {
only_solved_instances = results[results[,column_with_time] < 3600,]
cpu_times = aggregate(only_solved_instances[,column_with_time], list(only_solved_instances$n_knapsacks, only_solved_instances$n_items, only_solved_instances$alpha), mean)
colnames(cpu_times) <- c("n_knapsacks", "n_items", "alpha", "time")
return (cpu_times)
}
compute_mean_time("time_benders")
# Computing average computation time
cpu_times = aggregate(results[,c("time_benders", "time_ccg")], list(results$n_knapsacks, results$n_items, results$alpha), mean)
colnames(cpu_times) <- c("n_knapsacks", "n_items", "alpha", "time_benders", "time_ccg")
cpu_times = cpu_times[order(cpu_times$n_knapsacks, cpu_times$n_items, cpu_times$alpha),]
Table1 = cbind(attemps, unsolved[,c("unsolved_benders", "unsolved_ccg")],cpu_times[,c("time_benders", "time_ccg")])
colnames(Table1) <- c("K", "N", "alpha", "Total", "Unsolved benders", "Unsolved CCG", "Time benders", "Time CCG")
Table1 = Table1[order(Table1$K, Table1$N, Table1$alpha),]
rownames(Table1) <- NULL
knitr::kable(Table1, digits = c(0,0,2,0,0,0,2,2))
results$time_best = apply(results[,c("time_benders", "time_ccg")], 1, FUN = min)
results$perf_benders = results$time_benders / results$time_best
results$perf_ccg = results$time_ccg / results$time_best
max_perf = max( max(results$time_benders), max(results$time_ccg) )
results$perf_benders[results$time_benders >= 3600] = max_perf
results$perf_ccg[results$time_ccg >= 3600] = max_perf
plot_performance_profile <- function(data, xlim = c(1, max_perf), ylim = c(0., 1.), title = "Performance profile") {
perf_profile_benders = ecdf(data[,"perf_benders"])
perf_profile_ccg = ecdf(data[,"perf_ccg"])
plot(perf_profile_benders, col = "black", xlim = xlim, ylim = ylim, lty = "solid", cex = 0, main = title)
lines(perf_profile_ccg, col = "black", xlim = xlim, ylim = ylim, lty = "dotted", cex = 0)
}
xlim = c(1, 10)
plot_performance_profile(results, title = "Over all instances", xlim = xlim)
compute_mean_time <- function(column_with_time) {
only_solved_instances = results[results[,column_with_time] < 3600,]
cpu_times = aggregate(only_solved_instances[,column_with_time], list(only_solved_instances$n_knapsacks, only_solved_instances$n_items, only_solved_instances$alpha), mean)
colnames(cpu_times) <- c("n_knapsacks", "n_items", "alpha", "time")
cpu_times = cpu_times[order(cpu_times$n_knapsacks, cpu_times$n_items, cpu_times$alpha),]
return (cpu_times)
}
mean_time_benders = compute_mean_time("time_benders")
mean_time_ccg = compute_mean_time("time_ccg")
Table1 = cbind(attemps, unsolved[,c("unsolved_benders", "unsolved_ccg")],mean_time_benders$time, mean_time_ccg$time)
colnames(Table1) <- c("K", "N", "alpha", "Total", "Unsolved benders", "Unsolved CCG", "Time benders", "Time CCG")
rownames(Table1) <- NULL
knitr::kable(Table1, digits = c(0,0,2,0,0,0,2,2))
